function Request(url, method, data) {
  const baseUrl = "http://192.168.34.152:3000/api/bookmark"
  url = baseUrl + url
  return new Promise((resolve, reject) => {
    fetch(url, {
      method: method,
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(response => response.json())
    .then(response => {
      resolve(response)
    }).catch(error => {
      reject(error)
    })
  })
}

function pushBookmark(_bookmarks) {
  return Request("/addBookmarkList", "POST", {
    bookmarkList: _bookmarks
  })
}


// 获取所有本地的书签
function getBookmarks() {
  return new Promise((resolve, reject) => {
    chrome.bookmarks.getTree(function([{ children }]) {
      console.log(children);
      resolve(children)
    })
  })
}

// 将书签树扁平化
/**
 *  bookmarks: [{
 *    title: bookmark.title,
 *    url: bookmark.url,
 *    id: bookmark.id,
 *    parentId: bookmark.parentId
 * }]
 */
function flattenBookmarks(bookmarks) {
  let _bookmarks = []
  bookmarks.forEach(bookmark => {
    if (bookmark.children) {
      _bookmarks.push({
        title: bookmark.title,
        url: bookmark.url,
        id: bookmark.id,
        parentId: bookmark.parentId
      })
      _bookmarks = _bookmarks.concat(flattenBookmarks(bookmark.children))
    } else {
      _bookmarks.push({
        title: bookmark.title,
        url: bookmark.url,
        id: bookmark.id,
        parentId: bookmark.parentId
      })
    }
  })
  return _bookmarks
}

// 将parentId转为pathArray
function getPathArray(bookmarks, parentId) {
  let pathArray = []
  let parent = bookmarks.find(bookmark => bookmark.id === parentId)
  if (parent) {
    pathArray.unshift(parent.title)
    if (parent.parentId) {
      pathArray = getPathArray(bookmarks, parent.parentId) ? getPathArray(bookmarks, parent.parentId).concat(pathArray) : pathArray
    }
  }
  return pathArray
}


function convertParentIdToPathArray(bookmarks) {
  // 神深拷贝
  let bookmarksCopy = JSON.parse(JSON.stringify(bookmarks))
  let _bookmarks = bookmarks.map(bookmark => {
    bookmark.pathArray = getPathArray(bookmarksCopy, bookmark.parentId)
    return bookmark
  })
  return _bookmarks
}

// 监听书签变化
chrome.bookmarks.onChanged.addListener(function(id, bookmark) {
  console.log("bookmark changed: " + id);
  getBookmarks().then(bookmarks => {
    console.log(bookmarks);
    let _bookmarks = flattenBookmarks(bookmarks)
    _bookmarks = convertParentIdToPathArray(_bookmarks)
    console.log(_bookmarks);
  })
})
// 监听书签创建
chrome.bookmarks.onCreated.addListener(function(id, bookmark) {
  console.log("bookmark created: " + id);
  getBookmarks().then(bookmarks => {
    console.log(bookmarks);
    let _bookmarks = flattenBookmarks(bookmarks)
    _bookmarks = convertParentIdToPathArray(_bookmarks)
    console.log(_bookmarks);
  })
})
// 监听书签移除
chrome.bookmarks.onRemoved.addListener(function(id, bookmark) {
  console.log("bookmark removed: " + id);
  getBookmarks().then(bookmarks => {
    console.log(bookmarks);
    let _bookmarks = flattenBookmarks(bookmarks)
    _bookmarks = convertParentIdToPathArray(_bookmarks)
    console.log(_bookmarks);
  })
})
// 监听书签移动
chrome.bookmarks.onMoved.addListener(function(id, bookmark) {
  console.log("bookmark move: " + id);
  getBookmarks().then(bookmarks => {
    console.log(bookmarks);
    let _bookmarks = flattenBookmarks(bookmarks)
    console.log(_bookmarks);
    let _bookmarks2 = convertParentIdToPathArray(_bookmarks)
    console.log(_bookmarks2);
  })
})




// 安装时调用
chrome.runtime.onInstalled.addListener(function() {
  // 创建一个新的变量，存储一个空数组
  chrome.storage.sync.set({bookmarks: []}, function() {
    console.log("初始化 bookmarks")
  })
})

